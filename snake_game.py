
import pygame
import sys
import random
import math
import os
import datetime

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame ---
pygame.init()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Ä–∞–Ω–∞ 1 ---
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('–ü–ª–∞–≤–Ω–∞—è –ó–º–µ–π–∫–∞')

# --- –¶–≤–µ—Ç–∞ ---
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 170, 0)
DARK_GREEN = (0, 120, 0)
RED = (200, 0, 0)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã ---
clock = pygame.time.Clock()
FPS = 60

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–º–µ–π–∫–∏ ---
SNAKE_SPEED = 4
SNAKE_SIZE = 10  # –†–∞–¥–∏—É—Å —Å–µ–≥–º–µ–Ω—Ç–∞
# –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ü–µ–Ω—Ç—Ä–∞–º–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤. –ß—É—Ç—å –º–µ–Ω—å—à–µ –¥–∏–∞–º–µ—Ç—Ä–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è.
SEGMENT_DISTANCE = SNAKE_SIZE * 1.5 

# --- –®—Ä–∏—Ñ—Ç—ã –∏ –µ–¥–∞ ---
font = pygame.font.Font(None, 48)
# –ò—â–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏. –†–∞–∑–º–µ—Ä –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ –±–∏—Ç–º–∞–ø–Ω—ã–µ —ç–º–æ–¥–∑–∏.
fruit_font = pygame.font.SysFont("noto color emoji, segoe ui emoji, apple color emoji", 72)
FRUITS = ["üçé", "üçå", "üçá", "üçì", "üçä", "ü•ù", "üçí"]

def get_new_food():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ñ—Ä—É–∫—Ç –≤ —Å–ª—É—á–∞–π–Ω–æ–º –º–µ—Å—Ç–µ."""
    return {
        'emoji': random.choice(FRUITS),
        'pos': pygame.math.Vector2(random.randint(50, SCREEN_WIDTH - 50), random.randint(50, SCREEN_HEIGHT - 50))
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
    # --- –ù–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ---

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    if not os.path.exists('screenshots'):
        os.makedirs('screenshots')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–º–µ–π–∫—É, –≤—ã—Ç—è–Ω—É—Ç—É—é –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
    snake_segments = [pygame.math.Vector2(SCREEN_WIDTH / 2 - i * SEGMENT_DISTANCE, SCREEN_HEIGHT / 2) for i in range(5)]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–¥—É
    food = get_new_food()
    
    score = 0
    game_over = False

    while not game_over:
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π ---
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_a and (event.mod & pygame.KMOD_CTRL):
                    timestamp = datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
                    filename = os.path.join('screenshots', f'screenshot_{timestamp}.png')
                    pygame.image.save(screen, filename)

        # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
        mouse_pos = pygame.math.Vector2(pygame.mouse.get_pos())
        head = snake_segments[0]

        # --- –õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è ---
        # –í–µ–∫—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –≥–æ–ª–æ–≤—ã –∫ –º—ã—à–∏
        direction = mouse_pos - head
        if direction.length() > 0:
            direction.normalize_ip()
        
        # –î–≤–∏–≥–∞–µ–º –≥–æ–ª–æ–≤—É
        snake_segments[0] += direction * SNAKE_SPEED

        # –î–≤–∏–≥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ (–ª–æ–≥–∏–∫–∞ "–≤–µ—Ä–µ–≤–∫–∏")
        for i in range(1, len(snake_segments)):
            leader = snake_segments[i-1]
            follower = snake_segments[i]
            
            dir_to_leader = leader - follower
            dist = dir_to_leader.length()
            
            # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –æ—Ç–¥–∞–ª–∏–ª—Å—è, –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –µ–≥–æ
            if dist > SEGMENT_DISTANCE:
                dir_to_leader.normalize_ip()
                follower += dir_to_leader * (dist - SEGMENT_DISTANCE)
                snake_segments[i] = follower

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π ---
        # –°–æ —Å—Ç–µ–Ω–∞–º–∏
        if not (SNAKE_SIZE < head.x < SCREEN_WIDTH - SNAKE_SIZE and SNAKE_SIZE < head.y < SCREEN_HEIGHT - SNAKE_SIZE):
            game_over = True

        # –° –µ–¥–æ–π
        if head.distance_to(food['pos']) < SNAKE_SIZE * 2:
            score += 1
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—Ç–æ —Ö–≤–æ—Å—Ç–∞
            snake_segments.append(snake_segments[-1].copy())
            food = get_new_food()

        # –° —Å–æ–±–æ–π (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –¥–∞–ª—å—à–µ 3-–≥–æ)
        # for segment in snake_segments[3:]:
        #     if head.distance_to(segment) < SNAKE_SIZE:
        #         game_over = True
        #         break

        # --- –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ---
        screen.fill(BLACK)

        # –ï–¥–∞ (—Ñ—Ä—É–∫—Ç—ã)
        fruit_surface = fruit_font.render(food['emoji'], True, WHITE)
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ñ—Ä—É–∫—Ç –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (—á—É—Ç—å –±–æ–ª—å—à–µ –≥–æ–ª–æ–≤—ã –∑–º–µ–π–∫–∏)
        fruit_size = int(SNAKE_SIZE * 2.5)
        fruit_surface = pygame.transform.smoothscale(fruit_surface, (fruit_size, fruit_size))
        fruit_rect = fruit_surface.get_rect(center=(int(food['pos'].x), int(food['pos'].y)))
        screen.blit(fruit_surface, fruit_rect)

        # –ó–º–µ–π–∫–∞ (—Ä–∏—Å—É–µ–º —Å —Ö–≤–æ—Å—Ç–∞, —á—Ç–æ–±—ã –≥–æ–ª–æ–≤–∞ –±—ã–ª–∞ —Å–≤–µ—Ä—Ö—É)
        for i in range(len(snake_segments) - 1, -1, -1):
            segment = snake_segments[i]
            color = DARK_GREEN if i % 2 == 0 else GREEN
            pygame.draw.circle(screen, color, (int(segment.x), int(segment.y)), SNAKE_SIZE)
        
        # –ì–æ–ª–æ–≤–∞ (—Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –±—ã–ª–∞ –∑–∞–º–µ—Ç–Ω–∞)
        pygame.draw.circle(screen, (50, 255, 50), (int(head.x), int(head.y)), SNAKE_SIZE)

        # –°—á–µ—Ç
        score_text = font.render(f"–°—á–µ—Ç: {score}", True, WHITE)
        screen.blit(score_text, (10, 10))

        pygame.display.flip()
        clock.tick(FPS)

    # --- –≠–∫—Ä–∞–Ω –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã ---
    game_over_text = font.render("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!", True, RED)
    final_score_text = font.render(f"–í–∞—à —Å—á–µ—Ç: {score}", True, WHITE)
    screen.blit(game_over_text, (SCREEN_WIDTH // 2 - game_over_text.get_width() // 2, SCREEN_HEIGHT // 2 - 50))
    screen.blit(final_score_text, (SCREEN_WIDTH // 2 - final_score_text.get_width() // 2, SCREEN_HEIGHT // 2))
    pygame.display.flip()

    pygame.time.wait(3000)
    pygame.quit()
    sys.exit()

if __name__ == '__main__':
    main()
